vars: {
  d2-config: {
    layout-engine: elk
    # Terminal theme code
    theme-id: 300
  }
}

pull_model: Pull Based Model with Cloudbuild {
  shape: sequence_diagram

  k8s: Kubernetes {
    shape: image
    icon: https://icons.terrastruct.com/gcp%2FProducts%20and%20services%2FCompute%2FKubetnetes%20Engine.svg
  }

  flux: Flux {
    shape: image
    icon: https://raw.githubusercontent.com/sleepycat/diagrams/main/icons/flux/logo.svg
  }

  registry: Container Registry {
    shape: image
    icon: https://icons.terrastruct.com/gcp%2FProducts%20and%20services%2FDeveloper%20Tools%2FContainer%20Registry.svg
  }

  cloudbuild: Cloudbuild {
    shape: image
    icon: https://icons.terrastruct.com/gcp%2FProducts%20and%20services%2FDeveloper%20Tools%2FCloud%20Build.svg
  }
  github: GitHub repo {
    shape: image
    icon: https://icons.terrastruct.com/dev%2Fgithub.svg
  }
  ci: CI {
    cloudbuild <- github: Trigger build via https webhooks
    cloudbuild -> github: Pull new changes to build container
    cloudbuild -> cloudbuild: Build new image
    cloudbuild -> registry: Add sortable tag & push new image to registry
  }
  cd: CD {
    imageupdates: ðŸ—˜ Flux image update loop {
      flux -> registry: Polls registry for images on configurable interval
      flux -> github: Sorts and commits new image tag back to config
    }
    deployment: ðŸ—˜ Flux deployment loop {
      flux -> github: Pull config on configurable interval
      k8s <- flux: apply config
    }
    kubernetes: ðŸ—˜ Kubernetes reconciliation loop {
      k8s -> registry: Pull images specified in config
      k8s -> k8s: run containers specified in config
    }
  }
}

explanation: |md
  # Pull Based Deployment
  This model splits CI from CD for security and speed.

  Security scanning moves to repo and registry for continuous scanning<br/> (not only when CI pipelines run)

  Registry stores and scans images. Previous images provide rollback capability. 

  CI narrowly focused on building artifacts. Developers maintain pipelines.

  CD works by pulling and running images. 

  External services do not have production credentials.

  Follows GitOps principles to ensure superior auditability and BCP.

| {near: center-left}
