direction: down

explanation: |md
  # DMIA deployment architecture

  This architecture aims to reduce or eliminate the tradeoff between developer
   speed/autonomy and security/compliance.

  This approach allows PHAC to move at the speed of relevance for public health.

  Key features:
  - Addresses compliance/audit/security requirements for PB data
  - Addresses Business Continuity and Disaster Recovery requirements for PB systems
  - Increases developer velocity while maintaining compliance
  - All maintainance via pull requests
  - Isolation reduces blast radius and supports developer autonomy
  - Fully automated TLS certificate management (internal and external)
  - Zero downtime upgrades/rollbacks allow for business hours deployments
  - Low operational burden supports public health focus
  - System level Zero Trust implementation
| {
  near: center-left
}

gh: GitHub {
  icon: ./icons/gcp/github.svg
  style: {
    stroke: "#000000"
    fill: "#ffffff"
  }

  pr: Pull Request {
    icon: ./icons/gcp/git-pull-request.svg
    shape: image
    width: 30
    height: 50
  }

  branch: Branch {
    icon: ./icons/gcp/git-branch.svg
    shape: image
    width: 30
    height: 50
  }

  merge: Merge {
    icon: ./icons/gcp/git-merge.svg
    shape: image
    width: 30
    height: 50
  }

  commit: Commit {
    icon: ./icons/gcp/git-commit.svg
    shape: image
    width: 30
    height: 50
  }

  branch -> commit
  commit -> pr: vulnerability scan
  pr -> merge: code review
  merge -> branch
}

internet: The Internet {
  icon: ./icons/gcp/my_cloud.svg
  shape: image
}

letsencrypt: Let's Encrypt {
  icon: ./icons/letsencrypt/logo.svg
  shape: image
}

gcp: Google Cloud {
  style: {
    stroke: "#000000"
    fill: "#f1f3f4"
  }

  scc: Security Command Center {
    icon: ./icons/gcp/security_command_center.svg
    style: {
      stroke: "#808080"
      fill: "#ffffff"
    }
  }

  project: Project {
    style: {
      stroke: "#ffffff"
      fill: "#e1f6fe"
    }

    vpc: User managed VPC 10.1.0.0./16 {
      style: {
        stroke: blue
        font-color: blue
        stroke-dash: 3
        fill: transparent
      }

      fw: Firewall {
        style: {
          stroke: black
          font-color: black
          stroke-dash: 3
          fill: transparent
        }
        clouddns: Cloud DNS {
          icon: ./icons/gcp/cloud_dns.svg
          style: {
            stroke: "#808080"
            fill: "#ffffff"
          }
        }

        registry: Artifact Registry {
          icon: ./icons/gcp/artifact_registry.svg
          style: {
            stroke: "#808080"
            fill: "#ffffff"
          }
        }

        k8s: GKE Autopilot Cluster/Managed PaaS {
          style: {
            stroke: blue
            font-color: blue
            fill: transparent
          }

          ingress: Google Managed Ingress {
            icon: ./icons/kubernetes/pod.svg
            shape: image
          }

          certmanager: Cert Manager {
            icon: ./icons/certmanager/logo.svg
            shape: image
          }

          container: Low attack surface container {
            style: {
              stroke: black
              font-color: black
              fill: transparent
            }

            django: Django App {
              icon: ./icons/django/logo.svg
              shape: image
            }
          }

          pg: HA PostgreSQL Cluster {
            icon: ./icons/cloudnativepg/logo.svg
            shape: image
          }

          flux: GitOps operator {
            icon: ./icons/flux/logo.svg
            shape: image
          }

          ingress -> container: mtls
          container -> pg: mtls
        }
      }
    }
  }
}

internet -> gcp.project.vpc.fw.k8s.ingress: https
gcp.project.vpc.fw.k8s.flux -> gh: Pull based deployment via https
gcp.project.vpc.fw.k8s -> gcp.project.vpc.fw.registry: Pull images via https
letsencrypt <-> gcp.project.vpc.fw.k8s.certmanager: ACME
gcp.project.vpc.fw.clouddns <-> gcp.project.vpc.fw.k8s.certmanager: least priviledge service account via https
gcp.project.vpc.fw.clouddns <-> letsencrypt: ACME
gcp.project -> gcp.scc: All project logs/events visible in Security Command Center
