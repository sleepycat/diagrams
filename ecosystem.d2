vars: {
  d2-config: {
    # This is a little complicated for dagre or elk
    layout-engine: tala
  }
}

**.style.border-radius: 15
**.style.stroke: "#878E88"
***.style: {
  font-size: 25
}

legend: Legend {
  grid-rows: 4
  near: center-right
  style: {
    fill: transparent
    stroke: transparent
  }
  DPI Services: {
    class: dpiservice
  }
  DMIA data applications: {
    class: dataapp
  }
  SaaS Jupyter Notebooks: {
    class: dataenv
  }
  Reusable Kubernetes configuration: {
    class: k8sconfig
  }
}

cloud: Internet {
  shape: cloud
  near: ecosystem.gateway
}
classes: {
  dataapp: {
    style: {
      fill: "#F7ECE1"
    }
  }
  dpiservice: {
    style: {
      fill: "#D4C0C9"
    }
  }
  dataenv: {
    style: {
      fill: "#A9DDD6"
    }
  }
  k8sconfig: {
    style: {
      fill: "#BDD2A6"
    }
  }
  # I should be able to glob this but I can't. 
  line: {style: {stroke: "#878E88"}}
}

ecosystem: DPI Data Service Ecosystem {
  style: {
    fill: transparent
    font-size: 50
  }

  dns: Self-service DNS {class: dpiservice}
  obs: Service Observatory {class: dpiservice}
  core: Core Infrastructure {class: dpiservice}
  intake: Secure Data Intake {class: dpiservice}
  devops: DevSecOps Platform {
    class: k8sconfig
    style: {multiple: true}
  }
  dataapp: Data Applications {
    class: dataapp
    style: {
      multiple: true
    }
  }

  dataenv: Data Analysis Environments {
    class: dataenv
    style: {
      multiple: true
    }
  }
  geocoder: Geocoder {class: dpiservice}
  gateway: Data Front Door (PoC) {
    class: dpiservice
    style: {
      stroke-dash: 3
    }
  }

  dataapp <- gateway: delegates to {
    class: line
    style: {
      stroke-dash: 3
    }
  }

  obs -> dns: service discovery via DNS as data {class: line}
  intake -> core: deployed in {class: line}
  obs -> devops: uses {class: line}
  intake -> dns: uses {class: line}
  geocoder -> dns: uses {class: line}
  intake <- obs: scans {class: line}
  obs -> geocoder: scans {class: line}
  obs -> gateway: scans {class: line}
  dataapp <- obs: scans {class: line}
  intake -> devops: uses {class: line}
  intake <- dataenv: pulls data {class: line}
  dataapp -> devops: uses {class: line}
  dataapp -> dns: uses {class: line}
  devops -> core: deployed in {class: line}
  dataenv -> core: deployed in {class: line}
  dataenv -> geocoder: uses {class: line}

  intakedesc: |md
    #### Secure Data Intake (SafeInputs) (Alpha)
    * Extract data from unsafe files
    * Make safe data available via API internally
  | {near: ecosystem.intake}

  coredesc: |md
    #### Core infrastructre
    * Cloud Infrastructure
    * hosting data services
  | {near: ecosystem.core}

  dnsdesc: |md
    #### DNS
    * Configures DNS using data
    * Data analysis automates CIO visibility
    * Governance via graduated naming: alpha/beta/live
  | {near: ecosystem.dns}

  obsdesc: |md
    #### Observatory (Alpha)
    * Uses DNS data to discover services
    * Scans for accessibility, security, policy
  | {near: ecosystem.obs}

  devopsdesc: |md
    #### DevSecOps Platform (Beta)
    * Thin layer between App and Cloud
    * Reusable Zero Trust & resilience patterns
    * Supports isolation with control inheiritance<br/> via code reuse (not shared infrastructure) 
  | {near: ecosystem.devops}

  gatewaydesc: |md
    #### Data Front Door (PoC)
    * Aggregates GraphQL APIs owned by other teams
    * Presents a single unified API externally
  | {near: ecosystem.gateway}

  geocoderdesc: |md
    #### Geocoder (Alpha)
    * Private and reproducable geocoding
    * Supports data analysis workflows
  | {near: ecosystem.geocoder}
}

cloud -> ecosystem.obs: {class: line}
cloud -> ecosystem.geocoder: {class: line}
cloud -> ecosystem.gateway: {class: line}
cloud -> ecosystem.intake: {class: line}
